class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        
        if not grid:
            return 0
        
        R = len(grid)
        C = len(grid[0])
        
        # There is an easy way to find neighbours in a grid. No need to convert into graphs'
        #   Adjacency list or adjancency matrix. Since it is mentioned here that island can go
        #   either vertically or horizontally, so from (r, c) it can go to (r-1,c), (r+1,c),(r,c-1),(r,c+1)
        #  So we can build the direction vecotrs accordingly.
        dr = [-1, +1,  0,  0]
        dc = [ 0,  0, -1, +1]

        @lru_cache(None)
        def explore_neighbours(r, c):
            if (r < 0 or c < 0 or r >= R or c >= C or grid[r][c] != '1' ):
                return
            grid[r][c] = 'X'
            for i in range(4):
                explore_neighbours(r + dr[i], c + dc[i])
            
        # count the number of adjacent 1s 
        no_of_islands = 0
        for r in range(R):
            for c in range(C):
                if grid[r][c] == '1':
                    no_of_islands += 1
                    explore_neighbours(r, c)

        return no_of_islands