class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        
        M, N = len(text1), len(text2)
        dp = [[0] * (N+1) for _ in range(M + 1)]
        
        for i in range (1, M+1):
            for j in range(1, N+1):
                if text1[i-1] == text2[j -1]:
                    dp[i][j] = max(1 + dp[i-1][j-1], dp[i][j])
                # elif text1[i-1] != text2[j-1]:
                else:
                    dp[i][j] = max (dp[i-1][j], dp[i][j-1], dp[i][j])
                
#         # this is waht top down approach
#         dp[i][j] = max(dp[i+1][j], dp[i][j+1]) if text1(i) != text2(j)
#                  = 1 + dp[i+1][j+1]            if text1(i) == text2(j)
#                  = 0                           if i == M or j == N
    
#         # bottom up approach: if you notice the above formula state is transfered from 
#         # 2 diagonals.
#         dp[i][j] = max(dp[i-1][j], dp[i][j-1]) if (text1(i-1) != text2(j-1))
#                  = 1 + dp[i-1][j-1]            if text1(i-1) == text2(j-1) 
            
        
        return dp[-1][-1]