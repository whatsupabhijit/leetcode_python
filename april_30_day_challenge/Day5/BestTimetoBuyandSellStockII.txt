class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        running  = -float("inf")
        best = 0
        
        for price in prices:
            # either buy or sell. if you buy then deduct the price. 
            # greedy: buy low, sell high. When you have 10$ and when you buy deduct the current price
            running = max (running, best - price) 
            #when you sell a stock, you have more money so add the current price back.
            best = max(best, running + price)
        
        return best
            
        
# why this below solution work that just the idea that sell if next day high and buy if low.
# just plot the points in a 2D plot price vs day. you will see that the height of the lowest point and the highest point will be same as intermediate buy sells.
# just 
    # def maxProfit(self, prices: List[int]) -> int:
    #     if not prices:
    #         return 0
    #     profit = 0
    #     for i in range(1, len(prices)):
    #         if prices[i] - prices[i-1] > 0:
    #             profit += prices[i] - prices[i-1] #basically sum of all the low and high level.
    #     return profit
    
    
# DP solution (if you can buy multiple units of stocks and can hold)
#         dp[i][j] = total maximum profit until ith day by having j units
#         You can go to any of the below states from here. Either you buy or sell or do nothing
#         dp[i][j] --> dp[i+1][j] //do nothing, no buy no sell. so unit will be same i.e. j but day added so i+1
#         dp[i][j] --> dp[i+1][j - 1]  //sell one item
#                     so max (dp[i][j], dp[i+1][j-1] + price[j])
#         dp[i][j] --> dp[i+1][j + 1]  //buy one item 
#                     so max (dp[i][j], dp[i+1][j+1] - price[j])
        
# Greedy:- you can also go for Greedy solution + range query segment tree to bring complexity to N2 to N.Logn
# Check Errichto's video on the same. Leetcode week 1 summary