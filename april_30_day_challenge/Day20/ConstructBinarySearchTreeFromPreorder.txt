# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
       
    def bstFromPreorder(self, p: List[int]) -> TreeNode:

        # O(N^2) solution as if the array is [1,2,3,4,5,6,7]
        #    then in this below method first time compare N-1, N-2, ...1 time which is N(N-1)/2
        
        #if you notice first one will be root for sure. THen some elements will be smaller than root and then 
        # some elements will be larger than root. 8, [5,1,7], [10, 12]
        # N, smaller, larger = len(p), [], []        
        # if N == 0:
        #     return None
        # root = TreeNode(p[0])
        # for i in range(1, N):
        #     if p[i] < root.val:
        #         smaller.append(p[i])
        #     else:
        #         larger.append(p[i])
        # root.left  = self.bstFromPreorder(smaller)
        # root.right = self.bstFromPreorder(larger )
        
        # O(N) TIME and SPACE.
        idx, N = 0, len(p)
        
        def bstRecursive(l, r):
            nonlocal idx
            
            if idx == N or p[idx] > r or p[idx] < l:
                return None
            
            root = TreeNode(p[idx])
            idx += 1
            root.left  = bstRecursive(-float("inf"), root.val - 1)
            root.right = bstRecursive(root.val+1, r)
            return root
                
        return bstRecursive(-float("inf"), float("inf"))