class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        N = len (nums)
        
        # [1, 2, 3, 4]
        # prefix product array = [   1,    1,     2,     6,   24]   ---> left 
        # suffix product array = [  24,   24,    12,     4,    1]   ---> right
        # desired output array = [  24,   12,     8,     6]
        #                      = [1*24, 1*12, 2 * 4, 6 * 1] i.e. left(i) * right(i + 1)
        # O(N + 1 + N + 1) == O(N) space and O(N) time
        
        # left  = [1] * (N + 1)
        # right = [1] * (N + 1)
        # for i in range(1, N + 1):
        #     left[i] = left[i - 1] * nums[i - 1]
        # for i in range(N - 1, -1, -1):
        #     right[i] = right[i + 1] * nums [i]
        # return [left[x] * right[x + 1] for x in range (N)]
    
    
        # below solution takes O(N) time and O(1) space. 
        # output array ans is not considered as O(N) space here.
          # Say input [3, 2, 5, 6]
          #  ans  [1, 1, 1, 1]          ---> initially all 1s
          #  ans  [1, 3, 6, 1]          ---> left = 3(1*3), right = 6 (6*1)
          #  ans  [1, 90, 36, 1]        ---> left = 6(3*2), right = 30(6*5)
          #  ans  [60, 90, 36, 30]      ---> left = 30(3*2*5), right = 60 (6*5*2)

        ans = [1] * N
        left, right = 1, 1
        
        for i in range(N):
            ans[i] *= left    
            ans[-1 - i] *= right
            
            left *= nums[i]
            right *= nums[-1 - i]
            
        return ans
        
        